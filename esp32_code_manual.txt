#include <ESP32Servo.h>

// Motor A pins
#define IN1 16
#define IN2 17
#define ENA 21  // Motor A enable pin

// Motor B pins
#define IN3 18
#define IN4 19
#define ENB 22  // Motor B enable pin

// Servo motor pin
#define servoPin 23

// Servo object
Servo myservo;

// Define distance per matrix cell in cm
#define CELL_DISTANCE 10

void setup() {
  Serial.begin(9600);

  // Motor pins as outputs
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  // Attach the servo motor to its pin
  myservo.attach(servoPin);

  // Set motor speed to full
  digitalWrite(ENA, HIGH);
  digitalWrite(ENB, HIGH);

  // Center the servo motor (looking straight ahead)
  myservo.write(90);

  // Start the path
  followPath();
}

void loop() {
  // Path following logic runs only once in setup
}

void followPath() {
  moveForward(CELL_DISTANCE); // Move from (0,0) to (0,1)
  moveForward(CELL_DISTANCE); // Move from (0,1) to (0,2)
  turnRight(); // Turn right to face down
  moveForward(CELL_DISTANCE); // Move from (0,2) to (1,2)
  moveForward(CELL_DISTANCE); // Move from (1,2) to (2,2)
  turnLeft(); // Turn left to face right
  moveForward(CELL_DISTANCE); // Move from (2,2) to (2,3)
  moveForward(CELL_DISTANCE); // Move from (2,3) to (2,4)
  turnRight(); // Turn right to face down
  moveForward(CELL_DISTANCE); // Move from (2,4) to (3,4)
  stopMotors(); // Stop the robot at the end of the path
}

void moveForward(int distance) {
  int time = calculateTime(distance);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  delay(time);
  stopMotors();
}

void turnLeft() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  delay(500); // Adjust this delay for a proper 90-degree turn
  stopMotors();
}

void turnRight() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  delay(500); // Adjust this delay for a proper 90-degree turn
  stopMotors();
}

void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}

// Calculate time to move forward based on distance
int calculateTime(int distance) {
  int time = (distance / 10) * 1000; // Assume 1 second for 10 cm
  return time;
}
